{"version":3,"sources":["components/card/card.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["styles","imgResponsive","boxShadow","background","marginTop","width","height","Card","props","react_default","a","createElement","onClick","clickImage","className","src","imageUrl","style","alt","ClickyGame","state","characters","Characters","clickedId","userGuess","score","topScore","shuffleArray","i","length","j","Math","floor","random","_ref","imageClicked","id","newArray","_this","setState","trackedClicks","indexOf","push","_this2","this","href","map","element","card","key","image","React","Component","App","game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s5CAGMA,EAAS,CACXC,cAAe,CACXC,UAAW,sCACXC,WAAY,QACZC,UAAW,GACXC,MAAO,IACPC,OAAQ,MAYDC,MARf,SAAcC,GAEV,OACAC,EAAAC,EAAAC,cAAA,OAAKC,QAAWJ,EAAMK,WAAYC,UAAU,YAC5CL,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,SAAUC,MAAOjB,EAAOC,cAAea,UAAU,iBAAiBI,IAAI,qBCkE3EC,oNA5EfC,MAAQ,CACJC,WAAYC,EACZC,UAAW,GACXC,UAAW,0BACXC,MAAO,EACPC,SAAU,KAGdC,aAAe,SAAAjB,GACb,IAAK,IAAIkB,EAAIlB,EAAEmB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADLM,EAEtB,CAACxB,EAAEoB,GAAIpB,EAAEkB,IAAvBlB,EAAEkB,GAFkCM,EAAA,GAE9BxB,EAAEoB,GAF4BI,EAAA,GAIzC,OAAOxB,KAGLyB,aAAe,SAAAC,GACb,IAAIC,EAAWC,EAAKX,aAAcW,EAAKlB,MAAMC,YAC7CiB,EAAKC,SAAS,CAAClB,WAAYgB,IAC3B,IAAIG,EAAgBF,EAAKlB,MAAMG,WACI,IAA/BiB,EAAcC,QAAQL,IACpBI,EAAcE,KAAKN,GACnBE,EAAKC,SAAS,CACVhB,UAAWiB,EACXhB,UAAW,wBACXC,MAAOa,EAAKlB,MAAMK,MAAQ,EAC1BC,SAAUY,EAAKlB,MAAMM,SAAW,KAGtCY,EAAKC,SAAS,CACVf,UAAW,0BACXC,MAAO,EACPC,SAAUY,EAAKlB,MAAMM,oFAMtB,IAAAiB,EAAAC,KACP,OACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,0CACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,0BAA0B+B,KAAK,KAA5C,wBAGApC,EAAAC,EAAAC,cAAA,QAAMG,UAAU,iBAAiB8B,KAAKxB,MAAMI,UAA5C,KACAf,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAhB,UAAuC8B,KAAKxB,MAAMK,MAAlD,iBAAuEmB,KAAKxB,MAAMM,SAAlF,MAEFjB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQG,UAAU,8CAClBL,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,0FAGJF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACfL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACZ8B,KAAKxB,MAAMC,WAAWyB,IAAI,SAAAC,GACzB,OACEtC,EAAAC,EAAAC,cAACqC,EAAD,CACEC,IAAKF,EAAQX,GACbpB,SAAU+B,EAAQG,MAClBrC,WAAY,kBAAM8B,EAAKR,aAAaY,EAAQX,UAKpD3B,EAAAC,EAAAC,cAAA,oBAtEewC,IAAMC,YCIhBC,MANf,WACE,OACE5C,EAAAC,EAAAC,cAAE2C,EAAF,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8d9b0b8a.chunk.js","sourcesContent":["import React from \"react\";\r\n// import \"./stylecard.css\";\r\n\r\nconst styles = {\r\n    imgResponsive: {\r\n        boxShadow: \"-3px 18px 20px 0px rgba(99,89,99,1)\",\r\n        background: \"white\",\r\n        marginTop: 10,\r\n        width: 100,\r\n        height: 150\r\n    }\r\n}\r\n\r\nfunction Card(props) {\r\n\r\n    return (\r\n    <div onClick = {props.clickImage} className=\"col-md-3\">\r\n    <img src={props.imageUrl} style={styles.imgResponsive} className=\"img-responsive\" alt=\"disneyprincess\"/>\r\n    </div>\r\n    )\r\n}\r\nexport default Card;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport Characters from \"./../characters.json\";\r\nimport Card from \"./card/card\";\r\nimport \"./card/stylecard.css\"\r\n\r\n\r\nclass ClickyGame extends React.Component {\r\nstate = {\r\n    characters: Characters,\r\n    clickedId: [],\r\n    userGuess: \"Click an Image To Begin\",\r\n    score: 0,\r\n    topScore: 0\r\n}\r\n\r\nshuffleArray = a => {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\nreturn a\r\n}\r\n\r\n  imageClicked = id => {\r\n    var newArray = this.shuffleArray (this.state.characters)\r\n    this.setState({characters: newArray})\r\n    var trackedClicks = this.state.clickedId  \r\n    if (trackedClicks.indexOf(id) === -1) {\r\n          trackedClicks.push(id)\r\n          this.setState({\r\n              clickedId: trackedClicks,\r\n              userGuess: \"You guessed correctly\",\r\n              score: this.state.score + 1,\r\n              topScore: this.state.topScore + 1\r\n            });\r\n      } else {\r\n        this.setState({\r\n            userGuess: \"You guessed incorrectly\",\r\n            score: 0,\r\n            topScore: this.state.topScore,\r\n\r\n        }) \r\n      }\r\n    // console.log(id);\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-light bg-info text-white\">\r\n          <a className=\"navbar-brand text-white\" href=\"/\">\r\n            Princess Memory Game\r\n          </a>\r\n          <span className=\"navbar-center\">{this.state.userGuess} </span>\r\n          <span className=\"navbar-right\">Score: {this.state.score} | Top Score: {this.state.topScore} </span>\r\n        </nav>\r\n        <br></br>\r\n    <div>\r\n        <header className=\"header bg-secondary text-center text-white\">\r\n        <h4>Princess Memory Game</h4>\r\n        <h4>Click on a picture to earn 1 point! Do not click a picture more than once!</h4>\r\n        </header>\r\n    </div>\r\n    <br></br>\r\n        <div className=\"container\">\r\n        <br></br>\r\n          <div className=\"row\">\r\n            {this.state.characters.map(element => {\r\n              return (\r\n                <Card\r\n                  key={element.id}\r\n                  imageUrl={element.image}\r\n                  clickImage={() => this.imageClicked(element.id)}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <br></br>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClickyGame;\r\n","import React from 'react';\nimport './App.css';\nimport ClickyGame from \"./components/game\"\n\nfunction App() {\n  return (\n    < ClickyGame />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}